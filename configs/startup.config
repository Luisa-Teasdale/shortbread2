/*
 * Enable DSL 2 syntax
 */
nextflow.enable.dsl = 2
import java.time.*
import groovy.yaml.YamlSlurper
Date now = new Date()
def timestamp=now.format("yyyyMMdd-HH-mm-ss")
def timestamp2=now.format("yyyyMMdd")
def user= System.getenv()['LOGNAME'];

//Check if running in test mode and run with test sample sheet
if(params.containsKey('mode') )
{
  if(params.mode.toString().toLowerCase()=='test')
  {
     if(params.samplesheet=="")
    {
      System.out.println("No samplesheet provided - running shortbread in test mode with test data")
      def command = ["sh","-c","awk -F, '{print \$1\",${projectDir}/\"\$2}' ${projectDir}/samplesheet_ipkwheat.csv > ${launchDir}/.samplesheet.csv"]
      def process = command.execute()
      process.waitFor()
      params.samplesheet="${launchDir}/.samplesheet.csv"
    }
    if(params.refgenome=="")
    {
       params.refgenome="${projectDir}/data/IWGSC_RefSeq_v2.1_Chr1A.fasta"
    }
    def command = ["sh","-c","echo sleeping for 2seconds; sleep 2s"]
    def process = command.execute()
    process.waitFor()
  }
}
if(!new File(params.outdir).exists()){
     params.outdir ="${launchDir}"
     def command = ["sh","-c","echo sleeping for 2seconds; sleep 2s"]
     def process = command.execute()
     process.waitFor()
}


params.tabixmaxsize = 530000000 //Maximum genome size that can be accepted by tabix
//Get username on the computer that the pipeline is being executed
def userName = "pinky -l ${user}".execute().text.split("life:  ")[1].split("Directory")[0].trim()
def pathresults="${params.outdir}" //Set path to output

//Check for output path
if(pathresults=="" && params.mode.toString().toLowerCase()!="test")
{
   System.err.println("Error: The parameter 'outdir' where results are stored cannot be blank")
   System.exit(1)
}
else
{
    pathresults="${launchDir}"
}

// Aligner validation
def aligners = ['bwamem', 'bwamem2', 'bowtie2', 'star', 'subread']
if (!params.aligner in aligners) {
    System.err.println("Error: Invalid aligner '${params.aligner}'. Choose from: ${aligners.join(', ')}")
    System.exit(1)
}

// STAR aligner-specific checks (simplified)
if (params.aligner == 'star') {
    if (params.refannotation == '') {
        System.err.println("Important: Annotations highly recommended for STAR. Set 'refannotation' to '-' to proceed without.")
        System.exit(1)
    }
    if (params.seqtype == 'dna') {
        System.err.println("ERROR: STAR is for RNA-seq. Set 'seqtype' to 'rna' if using RNA-seq data.")
        System.exit(1)
    }
}

// Trimmer validation (using 'in' for better readability)
def trimmers = ['fastp', 'trimmomatic']
if (params.trimmethod !in trimmers) {
    System.err.println("Error: Invalid trimming method '${params.trimmethod}'. Choose from: ${trimmers.join(', ')}")
    System.exit(1)
}

def skiptools           = ['fastqc','alignment','markduplicates','gatk']
def colWidth            = 20
logtoprint=String.format("\n%-${colWidth}s %-${colWidth}s\n", "Parameter", "Value", )
logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n", "-"*colWidth, "-"*colWidth)

if(!params.runfastqconly)
{
  params.each {key, value ->
   if(value!=""&& !key.contains("version") && !key.contains("bcf") && !key.toLowerCase().contains("gatk") && key!="usedefaults" && !skiptools.contains(key))
      logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n", "$key", ": $value")
  }
  logtoprint=logtoprint+"\n--------------------------------GATK options---------------------------------------------------\n"
  params.each {
  key, value ->
    if(value!=""&& key.toLowerCase().contains("gatk") && key != "gatk" && !key.contains("version"))
      logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n", "$key".replace('gatk|GATK', ''), ": $value")
  }

  logtoprint=logtoprint+"\n--------------------------------VCF filtering options------------------------------------------\n"
  params.each { key, value ->
    if(value!=""&& key.contains("bcf") && !key.contains("version"))
      logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n", "$key".replace('bcf', ''), ": $value")
  }

  logtoprint=logtoprint+"\n--------------------------------Skip tools-----------------------------------------------------\n"
  params.each {key, value ->
    if(skiptools.contains(key))
      logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n", "$key", ": $value")
  }
}
if(!params.usedefaults)
{
    logtoprint=logtoprint+"\n--------------------------------Software versions------------------------------------------------\n"

    def condaYmlFile = new File("${projectDir}/conda_environment.yml")
    def yaml = new YamlSlurper().parse(condaYmlFile)
    def dependencies = yaml.dependencies
    dependencies.sort()
    dependencies.each { dependency ->
        logtoprint=logtoprint+dependency.toString().replace("=","-v")+"\n"
    }
}

params.gitver="git --git-dir=${projectDir}/.git rev-parse HEAD".execute().text.trim()
def gitprocess="git --git-dir=${projectDir}/.git tag".execute()
gitprocess.waitFor()
params.gittag=gitprocess.text.trim()

logtoprint=logtoprint+"\n\n\n--------------------------------Launch details-------------------------------------------------\n"
//logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n","commandLine",": ${commandLine}")
logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n","launchDir",": ${launchDir}")
logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n","shortbread2 path",": ${projectDir}")
logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n","shortbread2 git",": ${params.gitver}")
params.loginfo=logtoprint
//params.user = System.getProperty("user.home");
params.user=userName
if(params.emailaddress=="")
{
   params.notifications=false
}

//notification options for emails sent by shortbread2
notification {
  enabled = params.notifications
  to = params.emailaddress
  template = "${projectDir}/templates/notification.html"  
}

//Check if the provided path to GATK DB is valid
if(params.GATKupdateexistingdb)
{
  //check if path exists
  if(!new File("${params.GATKpathtodbs}").exists())
  {
    System.err.println("Error: path to existing GATK database not valid. \nThe path provided is:${params.GATKpathtodbs}")
    System.exit(1)
  }
}


//Check if samplesheet exists
if(!new File("${params.samplesheet}").exists() && !new File("${params.rawdata}").exists() && !new File("${params.GATKpathtodbs}").exists())
{
    System.err.println("Error: Path to raw data or samplesheet is invalid")
    System.exit(1)
}

if(params.alignment && !new File("${params.bamdir}").exists())
{
   System.err.println("Error: Path to directory '"+params.bamdir+"' is not valid")
   System.exit(1)
}

//Path where results are saved
params.runpath="${params.outdir}/SB2-Run/"
File logpath = new File(params.runpath+"/Logs/00_Preparation")
if(!new File(params.runpath).exists())
    new File(params.runpath).mkdirs()

def tracedir="${params.runpath}/Reports/"

//Include reporting metrics
timeline {
    enabled = true
    file = tracedir+"/"+timestamp+"-SB2-processes-execution-timeline.html"
}
report {
    enabled = true
    file = tracedir+"/"+timestamp+"-SB2-resource-usage-report.html"
}

dag {
     enabled = true
     file = tracedir+"/SB2-process-graph.html"
     overwrite= true
}

// Generate custom resource trace file
trace {
  enabled = true
  file = tracedir+"/"+timestamp+"-SB2-resource-trace.txt"
  fields = 'name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'
}

params.start=timestamp2
params.logbookpath="${params.runpath}/"+timestamp2+"-SB2-LOGBOOK.txt"

//Start saving logbook
def gitversion=params.gitver
def logbook=new File("${params.logbookpath}")

//Set logbook output
def rst="shortbread2 Logbook\n"
    rst+="===============================================================\n"
    rst+="Start date: "+timestamp+"\n"
    rst+="Performed by: ${params.user}\n"
    rst+="shortbread version: ${params.gittag}\n"
    rst+="shortbread2 build: ${gitversion}\n"
    rst+="Work directory: ${launchDir}\n"
    rst+="Results directory: ${params.runpath}\n"

def rst2="---------------------------------------------------------------------------\n"
    rst2+="                 Parameter details used in the analysis\n"
    rst2+="---------------------------------------------------------------------------\n"
    rst2+=logtoprint+"\n\n"

logbook.write(rst)
workflow.onComplete={
    def finalout="Nextflow version: ${nextflow.version}\n\n"
      finalout+="Command line used: ${workflow.commandLine}\n"
      finalout+="\nPipeline completed at: ${workflow.complete.format('yyyyMMdd-HH-mm-ss')}\n"
      finalout+="\nExecution status: ${ workflow.success ? 'OK' : 'failed' }\n"
      finalout+=rst2+"\n"
    logbook.append(finalout)
    //notification.subject="shortbread2 workflow completion [${workflow.runName}] - SUCCEED"
}

params.multiqcconfig="${projectDir}/configs/multiqc_config.yaml"

workflow.onError={
    logbook.append("Nextflow version: ${nextflow.version}\n\n")
    logbook.append("Command line used: ${workflow.commandLine}")
    logbook.append("\nShortbread2 stopped with the following message: ${workflow.errorMessage}\n")
    logbook.append(rst2+"\n")
}


//Check if index exists for selected aligner
def genomeexecutorlocal=true //
def indexdir="${params.indexdir}"

if(!new File(indexdir).exists())
{
    indexdir=new File("${params.refgenome}").getParent()
    //Check if the user has write access to index dir
    if(!new File("${indexdir}").canWrite())
    {
        System.err.println("Error: You don't have write access to ${indexdir}")
        indexdir="genome_index/"
    }
    else
    {
        indexdir=indexdir+"/index"
    }
    //Create index directory
    new File(indexdir).mkdirs()
}

def refprefix="${params.indexprefix}"
if(refprefix==""||refprefix=="build")
{
  refprefix="${params.aligner}_${params.refgenome.replaceAll('.*/','')}"
}

def matchingFile = new File(indexdir).list().each{ filename ->
    filename.startsWith(refprefix)
}

if (matchingFile.size()>1) {
    System.out.println("Index for ${params.refgenome} found in ${indexdir}")
} else {
    System.out.println("No file found starting with '${refprefix}'")
    genomeexecutorlocal=false
}

params.refindex="${indexdir}/${refprefix}"
params.genomeexecutorlocal=genomeexecutorlocal
System.out.println("Finished running startup config file ")
def command = ["sh","-c","echo sleeping for 2 second; sleep 2s"]
def sleeprocess = command.execute()
sleeprocess.waitFor()
includeConfig "${projectDir}/configs/resourcecompute.config"