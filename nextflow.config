manifest {
    author          = 'David Chisanga, Gabriel Keeble-Gagnere, Kerrie L Forrest, Josquin F Tibbits'
    name            = 'shortbread2'
    description     = 'shortbread2 - Scaling SNP calling capabilities with Nextflow'
    version         = '1.0.0'
    nextflowVersion = '>= 20.07.0'
    mainScript      = 'main.nf'
    homePage        = 'https://github.com/plantinformatics/shortbread2'
}

//Check if conda is installed
def isCondaInstalled() {
  try {
    def process = "conda --version".execute()
    process.waitFor()
    System.out.println(process.text.trim())
    return process.exitValue() == 0
  } catch (IOException e) {
    return false
  }
}

if (isCondaInstalled()) {
  System.out.println("Conda is installed.")
} else {
  System.out.println("Conda is not installed! Shortbread2 uses conda as a package manager\nInstall conda and restart again")
  System.exit(1)
}

import java.lang.System
//Set environment variables to be used by Nextflow
env {
  _JAVA_OPTIONS="-Xmx200g -XX:+UnlockExperimentalVMOptions" //environment variables to be used by Java to allocate heap memory
}

if (params.isEmpty()) {
    System.out.println("Warning: No parameter file Specified!")
    params.help=true
}
else
{
   params.help=false
}


//Include help file to check if parameters have been passed
includeConfig "${projectDir}/configs/help.config"

if(params.containsKey('paramfile') && new File(params.paramfile).exists())
{
    includeConfig "${params.paramfile}"
}
else
{
    System.out.println("Running shortbread using default parameter file: '${projectDir}/params.config'")
    includeConfig "${projectDir}/params.config"
}

def command = ["sh","-c","echo sleeping for 5 second; sleep 5s"]
def sleeprocess = command.execute()
sleeprocess.waitFor()

//Define parameter for processes to use scratch space
process {
  cache = 'lenient'
  withLabel: 'usescratch'{
    scratch = true
  }
}

//Define profiles to use
profiles {
  //Runs on the local host
  standard {
     executor {
          name='local'
      }
      process {
            cpus = 5
            queueSize=5
      }
    }

  slurm {
    executor {
      name='slurm'
      queueSize =1000
      jobName={"sb2-$task.process($task.tag)"}
    }
    process{
      errorStrategy = { task.exitStatus in 137..149 ? 'retry' : 'terminate' }
      maxRetries = 3

      //default resources allocated to individual processes
      queue = { task.index%2==0 || task.attempt>1 ? 'batch':'shortrun' }
      cpus = 2
      time = { 6.h * task.attempt }

      withLabel: 'verysmall' {
        cpus = 15
        memory = { 200.GB * task.attempt }
        time = { 24.h * task.attempt }
        queue = 'batch'
      }
      //Passed to the alignment step
      withLabel: 'small'
      {
          cpus = 20
          time = { 24.h * task.attempt }
          memory = { 200.GB * task.attempt }
          queue = 'batch'
      }

      withLabel: 'medium' {
        cpus = 25
        memory = { 200.GB * task.attempt }
        time = { 24.h * task.attempt }
        queue = 'batch'
      }

      withLabel:'GATK'
      {
            container='broadinstitute/gatk:4.6.0.0'
      }

      //resources requested for large runs
      withLabel: 'large' {
        cpus = 20
        memory = { 100.GB * task.attempt }
        time = { 48.h * task.attempt }
        queue = 'batch'
      }

      //resources requested for very large runs
      withLabel: 'verylarge' {
        cpus = 20
        memory = { 200.GB * task.attempt }
        time = { 5.d * task.attempt }
        queue = 'batch'
      }

      withLabel: 'GATKsmall' {
        time = { 1.d * task.attempt }
        queue = 'batch'
        memory = { 200.GB * task.attempt }
      }

      withLabel: 'GATKmedium' {
        time  = { 36.h * task.attempt }
        queue = 'batch'
        memory = { 200.GB * task.attempt }
      }

      withLabel: 'GATKlarge' {
        time  = { 48.h * task.attempt }
        queue = 'batch'
        memory = { 300.GB * task.attempt }
      }

      withLabel: 'GATKverylarge' {
        time  = { 3.d * task.attempt }
        queue = 'batch'
        memory = { 400.GB * task.attempt }
      }

      withLabel: 'haplotyping' {
          memory = { 100.GB * task.attempt }
      }
      withLabel: 'qualitycontrol' {
          memory = { 400.GB * task.attempt }
      }

      clusterOptions = "--account ${params.clusteraccount}"
    }
  }
}


//Enable conda environments
conda {
  conda="${projectDir}/conda_environment.yml"
  enabled=true
  cacheDir=System.getProperty("user.home")+"/.conda/envs/"
  createTimeout='60 min'
}
process.conda="${projectDir}/conda_environment.yml"

//Do not edit
includeConfig "${projectDir}/configs/modules.config"
includeConfig "${projectDir}/configs/startup.config"


if (params.mode=='test')
{
  System.out.println("Running shortbread in test mode")
}
else
{
   System.out.println("Running shortbread in production mode")
}
